"""
üì¶ DESEMPACOTAMENTO EM CHAMADAS DE FUN√á√ïES
------------------------------------------
O operador * (asterisco) √© usado para desempacotar iter√°veis em chamadas de fun√ß√£o,
distribuindo seus elementos como argumentos separados.
"""

# üè∑Ô∏è Dados de exemplo
string = 'ABCD'
lista = ['Maria', 'Helena', 1, 2, 3, 'Eduarda']
tupla = ('Python', '√©', 'legal')
salas = [
    ['Maria', 'Helena'],   # Sala 0
    ['Elaine'],            # Sala 1
    ['Luiz', 'Jo√£o', 'Eduarda']  # Sala 2
]

"""
üí° EXEMPLOS COMENTADOS:
1. Desempacotamento em vari√°veis:
p, b, *_, ap, u = lista  # Ignora elementos do meio com *_
print(p, u, ap)  # Maria Eduarda 3

2. Desempacotamento em print():
print('Maria', 'Helena', 1, 2, 3, 'Eduarda')  # Manual
print(*lista)  # Equivalente ao acima
print(*string)  # A B C D
print(*tupla)  # Python √© legal
"""

# üñ®Ô∏è Desempacotando lista de salas com separador
print(*salas, sep='\n')
# Sa√≠da:
# ['Maria', 'Helena']
# ['Elaine']
# ['Luiz', 'Jo√£o', 'Eduarda']

"""
üìå USOS COMUNS:
1. Passar elementos de lista como argumentos separados
2. Combinar iter√°veis: nova_lista = [*lista1, *lista2]
3. Transposi√ß√£o de dados: zip(*matriz)
4. Fun√ß√µes que aceitam n√∫mero vari√°vel de args

‚ú® T√âCNICAS AVAN√áADAS:
"""
# Desempacotamento em dicion√°rios (com **)
dados = {'nome': 'Maria', 'idade': 30}
print('{nome} tem {idade} anos'.format(**dados))

# Combinando operadores
valores = [*range(5), *'ABC']
print(valores)  # [0, 1, 2, 3, 4, 'A', 'B', 'C']

"""
‚ö†Ô∏è CUIDADOS:
1. N√£o use com iter√°veis muito grandes (pode estourar mem√≥ria)
2. A ordem do desempacotamento segue a ordem do iter√°vel
3. Para dicion√°rios, ** desempacota pares chave-valor
"""

"""
üìö APRENDIZADOS:
1. Sintaxe de desempacotamento com *
2. Aplica√ß√µes em fun√ß√µes built-in
3. Combina√ß√£o com outros operadores
4. Casos de uso avan√ßados
"""