"""
üêç INTERPRETADOR PYTHON: USOS AVAN√áADOS
---------------------------------------
O interpretador Python oferece v√°rias op√ß√µes de execu√ß√£o:

1. Execu√ß√£o direta:
   python mod.py       ‚Üí Roda o script mod.py

2. Modo unbuffered (√∫til para logs em tempo real):
   python -u mod.py    ‚Üí Desativa buffer de sa√≠da

3. Execu√ß√£o como m√≥dulo (import path correto):
   python -m mod       ‚Üí Roda __main__ do m√≥dulo

4. Comando direto:
   python -c 'print("Ol√°")' ‚Üí Executa c√≥digo inline

5. Modo interativo p√≥s-execuc√£o:
   python -i mod.py    ‚Üí Mant√©m terminal aberto ap√≥s rodar
"""

"""
üìú THE ZEN OF PYTHON (POR TIM PETERS)
-------------------------------------
Princ√≠pios filos√≥ficos da linguagem Python.
Acesse com: import this

1. Bonito √© melhor que feio.
2. Expl√≠cito √© melhor que impl√≠cito.
3. Simples √© melhor que complexo.
4. Complexo √© melhor que complicado.
5. Plano √© melhor que aglomerado.
6. Esparso √© melhor que denso.
7. Legibilidade conta.
8. Casos especiais n√£o s√£o especiais o bastante para quebrar as regras.
9. Embora a praticidade ven√ßa a pureza.
10. Erros nunca devem passar silenciosamente.
11. A menos que sejam explicitamente silenciados.
12. Diante da ambiguidade, recuse a tenta√ß√£o de adivinhar.
13. Deve haver um -- e s√≥ um -- modo √≥bvio para fazer algo.
14. Embora esse modo possa n√£o ser √≥bvio √† primeira vista a menos que voc√™ seja holand√™s.
15. Agora √© melhor que nunca.
16. Embora nunca frequentemente seja melhor que *exatamente* agora.
17. Se a implementa√ß√£o √© dif√≠cil de explicar, √© uma m√° ideia.
18. Se a implementa√ß√£o √© f√°cil de explicar, pode ser uma boa ideia.
19. Namespaces s√£o uma grande ideia -- vamos fazer mais dessas!
"""

"""
üí° COMO APLICAR NA PR√ÅTICA:
1. Prefira c√≥digo leg√≠vel a "esperto"
2. Trate erros explicitamente (try/except)
3. Mantenha fun√ß√µes simples e especializadas
4. Use namespaces (m√≥dulos, classes) para organiza√ß√£o
5. Documente decis√µes complexas

üõ†Ô∏è EXEMPLO DE BOAS PR√ÅTICAS:
"""
# Ruim (impl√≠cito, dif√≠cil de ler)
x = [i for i in range(10) if i%2==0]

# Bom (expl√≠cito, leg√≠vel)
def get_even_numbers(max_num):
    """Retorna lista de n√∫meros pares at√© max_num"""
    even_numbers = []
    for num in range(max_num):
        if num % 2 == 0:
            even_numbers.append(num)
    return even_numbers

"""
üîç PARA SABER MAIS:
- python --help (todas op√ß√µes)
- PEP 20 (The Zen of Python)
- Documenta√ß√£o: python.org/doc/
"""