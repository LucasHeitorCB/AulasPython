"""
üöÄ LIST COMPREHENSION AVAN√áADA COM FILTROS
------------------------------------------
Este c√≥digo demonstra o uso avan√ßado de list comprehension com:
1. Transforma√ß√£o condicional de dados
2. Filtros complexos
3. Formata√ß√£o profissional de sa√≠da
"""

from pprint import pprint

def p(v):
    """Fun√ß√£o auxiliar para impress√£o formatada"""
    pprint(v, sort_dicts=False, width=40)

# üõí Dados de produtos originais
produtos = [
    {'nome': 'p1', 'preco': 20},
    {'nome': 'p2', 'preco': 10},
    {'nome': 'p3', 'preco': 30},
]

# üí° List comprehension com:
# - Transforma√ß√£o condicional (aumento de 5% se pre√ßo > 20)
# - Filtro complexo (pre√ßo >= 20 E pre√ßo com aumento > 10)
novos_produtos = [
    {**produto, 'preco': produto['preco'] * 1.05}  # Aumento de 5%
    if produto['preco'] > 20 else {**produto}       # Mant√©m os demais
    for produto in produtos                         # Itera sobre produtos
    if (produto['preco'] >= 20 and produto['preco'] * 1.05 > 10)  # Filtro
]

print("üè∑Ô∏è Produtos filtrados e transformados:")
p(novos_produtos)

"""
üí° AN√ÅLISE DETALHADA:

1. Transforma√ß√£o Condicional:
   - Aplica aumento de 5% apenas se pre√ßo > 20
   - Mant√©m os demais produtos inalterados

2. Filtro Complexo:
   - produto['preco'] >= 20: seleciona produtos com pre√ßo m√≠nimo de 20
   - produto['preco'] * 1.05 > 10: garante que mesmo com aumento o pre√ßo fique acima de 10

3. Formata√ß√£o de Sa√≠da:
   - pprint mostra a estrutura de dados de forma organizada
   - sort_dicts=False mant√©m a ordem original dos dicion√°rios
   - width=40 limita a largura da exibi√ß√£o

üìå RESULTADO ESPERADO:
[{'nome': 'p1', 'preco': 20},
 {'nome': 'p3', 'preco': 31.5}]
"""

"""
‚ö†Ô∏è CUIDADOS COM LIST COMPREHENSION COMPLEXA:
1. Pode reduzir a legibilidade do c√≥digo
2. Dif√≠cil depura√ß√£o quando h√° erros
3. Pode se tornar ineficiente para grandes datasets

‚ú® ALTERNATIVAS PARA C√ìDIGO COMPLEXO:
1. Usar fun√ß√µes auxiliares
2. Dividir em m√∫ltiplas comprehensions
3. Utilizar loops tradicionais quando necess√°rio
"""

"""
üìö APRENDIZADOS:
1. Como combinar transforma√ß√µes e filtros
2. Uso de condi√ß√µes complexas em comprehensions
3. T√©cnicas profissionais de formata√ß√£o de sa√≠da
4. Quando evitar comprehensions muito complexas
"""